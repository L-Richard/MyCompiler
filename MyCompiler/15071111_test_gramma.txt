const int  g_const_int1 = 3, g_const_int2 = 2;
const char g_const_char1 = 'a', g_const_char2 = 'l';
const int sameName = 123;
int count;
int  g_is[10];
char g_cs[3];

int  g_var_int1, g_var_int2;
char g_var_char1, g_var_char2;
int  g_array_int[10];
char g_array_char[3];

char test_fun_foo1() {
	int a;
	char b;
	return ('a');
}
int test_fun_foo2() {
	return ('a'+'b');
}

void test_fun(int i, int j, int k, char c, char d) {
	printf("test_fun: four parameters: int i,j   char c,d");
	printf("test_fun: i=", i);
	printf("test_fun: j=", j);
	printf("test_fun: k=", k);
	printf("test_fun: c=", c);
	printf("test_fun: d=", d);
	printf("------------------------------------------------------");
}

void test_if() {
	const int i = 0;
	const char c = 'a';
	printf("test_if: i=0, c='a'");
	if (i < 1) {
		count = count + 1;
		printf("test_if: <  : i<1");
	}
	if (i <= 0) {
		count = count + 1;
		printf("test_if: <= : i<=0");
	}
	if (i == 0) {
		count = count + 1;
		printf("test_if: == : i==0");
	}
	if (i > -1) {
		count = count + 1;
		printf("test_if: >  : i>-1");
	}
	if (i >= 0) {
		count = count + 1;
		printf("test_if: >= : i>=0");
	}
	if (c) {
		count = count + 1;
		printf("test_if: if(var char)");
	}
	if (i) {
		count = count - 1;
		printf("test_if: if(var int), error should not print this string");
	}
	if ('a') {
		count = count + 1;
		printf("test_if: if(const char)");
	}
	if (1) {
		count = count + 1;
		printf("test_if: if(const int !0)");
	}
	if (-1) {
		count = count + 1;
		printf("test_if: if(const int !0");
	}
	if (0) {
		count = count - 1;
		printf("test_if: if(const int 0), error should not print this string");
	}

	printf("-------------------------------------------------------");
}
void test_while() {
	const int im = 5;
	int i;
	i = 0;
	printf("test_while: ");
	while (i < im) {
		printf(" i = ", i);
		i = i + 1;
	}
	while (i) {
		i = i - 1;
		printf(" i = ", i);
	}
	printf("-------------------------------------------------------");
}
void test_switch(int i) {
	switch (i) {
	case 0: printf("test_switch(i): i = 0");
	case 1: printf("test_switch(i): i = 1");
	case 'a': printf("test_switch(i): i = 'a'");
	case +2: printf("test_switch(i): i = +2");
	case -3: printf("test_switch(i): i = -3");
	default: printf("test_switch(i): default");
	}
	switch (1) {
		case 2 : ;
	}
	printf("-------------------------------------------------------");
}
int F(int n) {
	if (n == 1 ) {
		return (1);
	}
	if (n == 2) {
		return (1);
	}
	return (F(n-1) + F(n-2));
}
void main() {
	int i, n, f;
	int sameName;
	char cs[10];
	int is[10];
	cs[0] = 'a';
	cs[1] = 1;
	g_cs[0] = 's';
	g_cs[1] = 2;

	is[0] = 'z';
	is[1] = 3;
	g_is[0] = 'x';
	g_is[1] = 4;

	cs[11] = 'c';
	is[11] = 5;
	g_cs[13] = 'v';
	g_is[11] = 6;



	count=0;
	i = 1;
	n = 2;
	f = 3;
	g_array_char[0] = 'a';
	g_array_char[1] = 'b';
	g_array_char[2] = test_fun_foo1();
	g_var_char1 = 'g';
	g_var_char2 = 'x';
	g_var_int1 = g_const_int1 * g_const_int2;
	g_var_int2 = g_const_char2 - g_const_char1;
	sameName = test_fun_foo2();
	printf("test assign statement:---------------");
	printf("g_array_char[0] = ", g_array_char[0]);
	printf("g_array_char[1] = ", g_array_char[1]);
	printf("g_array_char[2] = ", g_array_char[2]);
	printf("g_var_int1 = ", g_var_int1);
	printf("g_var_int2 = ", g_var_int2);
	g_var_int1 = g_array_char[0] + g_array_char[1];
	g_var_int2 = g_array_char[2] - g_array_char[0];
	printf("g_var_int1 = ", g_var_int1);
	printf("g_var_int2 = ", g_var_int2);
	g_var_char1 = 'z';
	g_var_char2 = 'x';
	printf("g_var_char1 = ", g_var_char1);
	printf("g_var_char2 = ", g_var_char2);
	printf("test global and local same name ident:");
	printf("sameName in main: ", sameName);

	printf("test printf: -------------------------- ")
	printf(" !#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
	printf("", g_const_char2);
	printf("", g_const_int2);
	printf("g_const_char1 = ", g_const_char1);
	printf("g_const_int1 = ", g_const_int1);
	printf("int const ident: ", g_const_int1);
	printf("int const value: ", 123);
	printf("int variable: ", g_var_int1);
	printf("char const ident: ", g_const_char1);
	printf("char const value: ", 'a');
	printf("char variable: ", g_var_char1);

	printf("expression cal with char const ident: ", (g_const_char1));
	printf("expression cal with char const value: ", ('a'));
	printf("expression cal with char var: ", (g_var_char1));
	printf("expression cal with int: i+n=", i+n);
	printf("expression cal with int and char: i * g_const_char1 = ", i * g_const_char1);
	printf("expression cal with int and char: i * g_array_char[2] = ", i * g_array_char[2]);
	

	printf("test scanf: input n:");
	scanf(n);
	printf("Fibnaci result of n ", F(n));

	printf("test expression statement:------------");
	f = F(n);
	n = 5;
	i = 2;
	printf("test expression statement:------------");
	printf("Fibnaci result of n ", F(n));
	printf("i/-1=", i / -1);
	printf("3 + 1 - 2 - 5 + 10 - (((1))) = ", 3 + 1 - 2 - 5 + 10 - (((1))));
	printf("i / -6 / n * 2 * F(3) = ", i / -6 / n * 2 * F(3));
	printf("i * n / -5 * +6 = ", i * n / -5 * +6);
	f = (F(n) + i * n / -5 * +6 - i / -6 / n * +2 * F(3) * (3--1+-2-+5++10-(((1)))));
	printf("complex expression:");
	printf("F(n) + i * n / -5 * +6 - i / -6 / n * +2 * F(3) * (3--1+-2-+5++10-(((1))))) = ", f);

	printf("set global array of int values:");
	while (i < 10) {
		g_array_int[i] = i + 1;
		i = i + 1;
	}
	printf("print global array of int values:");
	while (i < 10) {
		printf("g_array_int[i] = ", g_array_int[i]);
		i = i + 1;
	}

	test_if();
	test_switch(1);
	test_switch(2);
	test_switch(3);
	test_switch('a');
	test_while();
	test_fun(F(n), i, g_const_int2, g_const_char1, 'a');
	printf("count = ", count);
	{
		;
	}
	{{{}}{}}
}



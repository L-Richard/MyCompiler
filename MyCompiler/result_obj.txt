.data
	_str_endl: .asciiz "\n"
	_str_0: .asciiz " x = "
	_str_1: .asciiz " y = "
	_str_2: .asciiz " SWAP x = "
	_str_3: .asciiz " SWAP y = "
	_str_4: .asciiz " OVERFLOW!          \n"
	_str_5: .asciiz " complete number: "
	_str_6: .asciiz "  "
	_str_7: .asciiz "          \n"
	_str_8: .asciiz " ---------------------------------------------------------------          \n"
	_str_9: .asciiz " b = "
	_str_10: .asciiz " "
	_str_11: .asciiz "          The total is "
	_str_12: .asciiz " 10! = "
.text
	j main_lb0
 fun_lb2:
	sw $ra, 0($sp)
	bgt $a1, 1, end_if_lb3
	li $v0, 1
	lw $ra, 0($sp)
	addi $sp, $sp, 20
	jr $ra
 end_if_lb3:
	# calc
	li $t1, 1
	sub $a2, $a1, $t1
	# end calc
	# save
	move $fp, $sp
	subi $sp, $sp, 20
	sw $a1, 4($fp)
	sw $a2, 8($fp)
	# storePara
	move $a1, $a2
	# end storePara
	# call
	jal fun_lb2
	move $a3, $v0
	# restore
	lw $a1, 4($sp)
	lw $a2, 8($sp)
	# end restore
	# calc
	mul $s0, $a1, $a3
	# end calc
	move $v0, $s0
	lw $ra, 0($sp)
	addi $sp, $sp, 20
	jr $ra
 fun_lb4:
	sw $ra, 0($sp)
	# calc
	div $a2, $a1
	mflo $a3
	# end calc
	# calc
	mul $s0, $a3, $a1
	# end calc
	# calc
	sub $a2, $a2, $s0
	# end calc
	move $v0, $a2
	lw $ra, 0($sp)
	addi $sp, $sp, 20
	jr $ra
 fun_lb5:
	sw $ra, 0($sp)
	# print
	li $v0, 4
	la $a0, _str_0
	syscall
	li $v0, 1
	move $a0, $a1
	syscall
	li $v0, 4
	la $a0, _str_endl
	syscall
	# print
	li $v0, 4
	la $a0, _str_1
	syscall
	li $v0, 1
	move $a0, $a2
	syscall
	li $v0, 4
	la $a0, _str_endl
	syscall
	# assign
	move $a3, $a1
	# end assign
	# assign
	move $a1, $a2
	# end assign
	# assign
	move $a2, $a3
	# end assign
	# print
	li $v0, 4
	la $a0, _str_2
	syscall
	li $v0, 1
	move $a0, $a1
	syscall
	li $v0, 4
	la $a0, _str_endl
	syscall
	# print
	li $v0, 4
	la $a0, _str_3
	syscall
	li $v0, 1
	move $a0, $a2
	syscall
	li $v0, 4
	la $a0, _str_endl
	syscall
	lw $ra, 0($sp)
	addi $sp, $sp, 16
	jr $ra
 fun_lb6:
	sw $ra, 0($sp)
	# assign
	lw $t0, 4($sp)
	move $a3, $t0
	# end assign
 while_lb8:
	bge $a3, 1024, end_while_lb7
	# assign
	li $t0, -1
	move $a1, $t0
	# end assign
	# assign
	move $a2, $a3
	# end assign
	# assign
	li $t0, 1
	move $s1, $t0
	# end assign
 while_lb10:
	bge $s1, $a3, end_while_lb9
	# calc
	div $a3, $s1
	mflo $s2
	# end calc
	# calc
	mul $s3, $s2, $s1
	# end calc
	# save
	move $fp, $sp
	subi $sp, $sp, 20
	sw $a3, 524($fp)
	sw $s1, 520($fp)
	sw $s3, 536($fp)
	sw $a2, 532($fp)
	sw $s2, 572($fp)
	sw $a1, 528($fp)
	# storePara
	move $a2, $a3
	move $a1, $s1
	# end storePara
	# call
	jal fun_lb4
	move $s2, $v0
	# restore
	lw $a3, 524($sp)
	lw $s1, 520($sp)
	lw $s3, 536($sp)
	lw $a2, 532($sp)
	lw $a1, 528($sp)
	# end restore
	bne $s2, 0, end_if_lb11
	# calc
	addiu $a1, $a1, 1
	# end calc
	# calc
	sub $a2, $a2, $s1
	# end calc
	blt $a1, 128, end_if_lb12
	# print
	li $v0, 4
	la $a0, _str_4
	syscall
 end_if_lb12:
	bge $a1, 128, end_if_lb13
	sll $t1, $a1, 2
	addu $t1, $t1, $sp
	sw $s1, 8($t1)
 end_if_lb13:
 end_if_lb11:
	# calc
	addiu $s1, $s1, 1
	# end calc
	j while_lb10
 end_while_lb9:
	bne $a2, 0, end_if_lb14
	# print
	li $v0, 4
	la $a0, _str_5
	syscall
	li $v0, 1
	move $a0, $a3
	syscall
	li $v0, 4
	la $a0, _str_endl
	syscall
	# assign
	li $t0, 0
	move $s1, $t0
	# end assign
 while_lb16:
	bgt $s1, $a1, end_while_lb15
	sll $t1, $s1, 2
	addu $t1, $sp, $t1
	lw $s2, 8($t1)
	# print
	li $v0, 4
	la $a0, _str_6
	syscall
	li $v0, 1
	move $a0, $s2
	syscall
	li $v0, 4
	la $a0, _str_endl
	syscall
	# calc
	addiu $s1, $s1, 1
	# end calc
	j while_lb16
 end_while_lb15:
	# print
	li $v0, 4
	la $a0, _str_7
	syscall
 end_if_lb14:
	# calc
	addiu $a3, $a3, 1
	# end calc
	j while_lb8
 end_while_lb7:
	# print
	li $v0, 4
	la $a0, _str_8
	syscall
	# assign
	li $t0, 0
	move $a2, $t0
	# end assign
	# assign
	li $t0, 0
	move $s1, $t0
	# end assign
 while_lb18:
	bge $s1, 1024, end_while_lb17
	# calc
	mul $a1, $a2, $s1
	# end calc
	# calc
	lw $a1, 528($sp)
	mul $s2, $a3, $a1
	# end calc
	# calc
	lw $a1, 564($sp)
	addu $s3, $a1, $a1
	# end calc
	# calc
	addu $a2, $s3, $s2
	# end calc
	# calc
	addiu $s1, $s1, 1
	# end calc
	j while_lb18
 end_while_lb17:
	# assign
	move $a1, $a2
	# end assign
	# assign
	li $t0, 0
	move $s1, $t0
	# end assign
 while_lb20:
	bge $s1, 1024, end_while_lb19
	# calc
	addu $a1, $a1, $s1
	# end calc
	# calc
	addiu $s1, $s1, 1
	# end calc
	j while_lb20
 end_while_lb19:
	# print
	li $v0, 4
	la $a0, _str_9
	syscall
	li $v0, 1
	move $a0, $a1
	syscall
	li $v0, 4
	la $a0, _str_endl
	syscall
	# print
	li $v0, 4
	la $a0, _str_8
	syscall
	# assign
	li $t0, 0
	move $a2, $t0
	# end assign
	# assign
	li $t0, 1
	move $a3, $t0
	# end assign
	# assign
	li $t0, 2
	move $a1, $t0
	# end assign
 while_lb22:
	bgt $a1, 1024, end_while_lb21
	# calc
	li $t1, 2
	div $a1, $t1
	mflo $s0
	# end calc
	# assign
	li $t0, 2
	move $s1, $t0
	# end assign
 while_lb24:
	bgt $s1, $s0, end_while_lb23
	# calc
	div $a1, $s1
	mflo $s2
	# end calc
	# calc
	mul $s3, $s2, $s1
	# end calc
	# save
	move $fp, $sp
	subi $sp, $sp, 20
	sw $s1, 520($fp)
	sw $s0, 544($fp)
	sw $a3, 552($fp)
	sw $a2, 548($fp)
	sw $s3, 556($fp)
	sw $a1, 540($fp)
	sw $s2, 588($fp)
	# storePara
	move $a2, $a1
	move $a1, $s1
	# end storePara
	# call
	jal fun_lb4
	move $s2, $v0
	# restore
	lw $s1, 520($sp)
	lw $s0, 544($sp)
	lw $a3, 552($sp)
	lw $a2, 548($sp)
	lw $s3, 556($sp)
	lw $a1, 540($sp)
	# end restore
	bne $s2, 0, end_if_lb25
	# assign
	li $t0, 0
	move $a3, $t0
	# end assign
 end_if_lb25:
	# calc
	addiu $s1, $s1, 1
	# end calc
	j while_lb24
 end_while_lb23:
	bne $a3, 1, end_if_lb26
	# print
	li $v0, 4
	la $a0, _str_10
	syscall
	li $v0, 1
	move $a0, $a1
	syscall
	li $v0, 4
	la $a0, _str_endl
	syscall
	# calc
	addiu $a2, $a2, 1
	# end calc
	# calc
	li $t1, 10
	div $a2, $t1
	mflo $s2
	# end calc
	# calc
	li $t1, 10
	mul $s3, $s2, $t1
	# end calc
	bne $s3, $a2, end_if_lb27
	# print
	li $v0, 4
	la $a0, _str_7
	syscall
 end_if_lb27:
 end_if_lb26:
	# assign
	li $t0, 1
	move $a3, $t0
	# end assign
	# calc
	addiu $a1, $a1, 1
	# end calc
	j while_lb22
 end_while_lb21:
	# print
	li $v0, 4
	la $a0, _str_11
	syscall
	li $v0, 1
	move $a0, $a2
	syscall
	li $v0, 4
	la $a0, _str_endl
	syscall
	lw $ra, 0($sp)
	addi $sp, $sp, 600
	jr $ra
 main_lb0:
	# save
	move $fp, $sp
	subi $sp, $sp, 20
	# storePara
	li $a1, 10
	# end storePara
	# call
	jal fun_lb2
	move $a1, $v0
	# restore
	# end restore
	# assign
	move $a2, $a1
	# end assign
	# print
	li $v0, 4
	la $a0, _str_12
	syscall
	li $v0, 1
	move $a0, $a2
	syscall
	li $v0, 4
	la $a0, _str_endl
	syscall
	# save
	move $fp, $sp
	subi $sp, $sp, 16
	sw $a2, 4($fp)
	sw $a1, 8($fp)
	# storePara
	li $a1, 5
	li $a2, 10
	# end storePara
	# call
	jal fun_lb5
	# save
	move $fp, $sp
	subi $sp, $sp, 600
	# storePara
	li $t0, 2
	sw $t0, 4($sp)
	# end storePara
	# call
	jal fun_lb6
 end_main_lb1:
